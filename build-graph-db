#!/usr/bin/python3
import struct
import csv
import sys
import os.path

MAX_VERTEX = 69959490

index_rec = struct.Struct('Q')
edge_rec = struct.Struct('L')

def proc_vertex(al_ix_file, al_file, src, vid):
    pass

def main():
    al_ix_file = open(os.path.expanduser('~/wspr/vertex_al_ix'), 'w')
    al_file = open(os.path.expanduser('~/wspr/vertex_al'), 'w')
    src = csv.reader(sys.stdin, delimiter='\t')
    # 0 is used as a null value in the index to denote
    # there is no list to point to. so we cannot have a
    # valid list at 0. this puts a magic number at the 0
    # position so our real lists start at 4
    al_ix_file.write(index_rec.pack(1337))
    last_id = 0
    for vid, edges_str in src:
        vid = int(vid)
        edges = [int(x) for x in edges_str.split(',')]
        print(vid, edges)
        # zero pad between last id and tgis id
        for _ in range(last_id, vid):
            al_ix_file.write(index_rec.pack(0))
        last_id = vid
        # write list of adjacent vertexes
        al_pos = al_file.tell()
        for edge in edges:
            al_file.write(edge_rec.pack(edge))
        if len(edges) == 0:
            # optimization: existing vertexes with no edges
            # get no entry in database
            al_ix_file.write(index_rec.pack(0))
        else:
            # record beginning of adjacency list in index
            # and add null terminator
            al_ix_file.write(index_rec.pack(al_pos))
            al_file.write(edge_rec.pack(0))

if __name__ == '__main__':
    main()
